# tg_bot.py
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from bot_core import BotSession, program_title

logging.basicConfig(level=logging.INFO)
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# –°–µ—Å—Å–∏–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∂–¥–æ–º—É ‚Äî —Å–≤–æ–π BotSession)
SESSIONS = {}

def session_for(update: Update) -> BotSession:
    uid = update.effective_user.id if update.effective_user else 0
    if uid not in SESSIONS:
        SESSIONS[uid] = BotSession()
    return SESSIONS[uid]

INTRO = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—á—ë–±—É.\n"
    "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É: /ai –∏–ª–∏ /aiproduct\n"
    "–ó–∞–¥–∞–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ (—Ç–µ–≥–∏), –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Ç–µ–≥–∏: ml, nlp, python, sys\n"
    "‚Ä¢ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 2 —Å–µ–º–µ—Å—Ç—Ä\n"
    "‚Ä¢ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã 1 —Å–µ–º–µ—Å—Ç—Ä\n"
    "‚Ä¢ –≤—ã–±–æ—Ä–Ω—ã–µ 2 —Å–µ–º–µ—Å—Ç—Ä\n"
    "‚Ä¢ –ø—Ä–∞–∫—Ç–∏–∫–∞ / –≥–∏–∞ / soft skills\n"
    "‚Ä¢ –Ω–∞–π–¥–∏ –∫—É—Ä—Å: –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
    "‚Ä¢ —Å—Ä–∞–≤–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(INTRO)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(INTRO)

async def programs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    ans = s.handle("–ø—Ä–æ–≥—Ä–∞–º–º—ã")
    await update.message.reply_text(ans)

async def set_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    s.program = "ai"
    await update.message.reply_text(f"‚úÖ –û–∫, —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π: ¬´{program_title('ai')}¬ª.")
    
async def set_ai_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    s.program = "ai_product"
    await update.message.reply_text(f"‚úÖ –û–∫, —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π: ¬´{program_title('ai_product')}¬ª.")

async def compare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    await update.message.reply_text(s.handle("—Å—Ä–∞–≤–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"))

async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    text = " ".join(context.args) if context.args else ""
    # –ø–æ–∑–≤–æ–ª–∏–º /recommend 2  => —Å–µ–º–µ—Å—Ç—Ä 2
    if text and text.isdigit():
        text = f"—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {text} —Å–µ–º–µ—Å—Ç—Ä"
    else:
        text = "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ " + text
    await update.message.reply_text(s.handle(text))

async def set_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    # –ø—Ä–∏–º–µ—Ä: /tags ml, nlp, python
    raw = " ".join(context.args) if context.args else ""
    if not raw:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: /tags ml nlp python")
        return
    await update.message.reply_text(s.handle(f"—Ç–µ–≥–∏: {raw}"))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = session_for(update)
    text = update.message.text or ""
    try:
        answer = s.handle(text)
    except Exception as e:
        logging.exception("TG error")
        answer = f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help"
    await update.message.reply_text(answer)

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled error: %s", context.error)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("programs", programs))
    app.add_handler(CommandHandler("ai", set_ai))
    app.add_handler(CommandHandler("aiproduct", set_ai_product))
    app.add_handler(CommandHandler("compare", compare))
    app.add_handler(CommandHandler("recommend", recommend))
    app.add_handler(CommandHandler("tags", set_tags))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(on_error)

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
